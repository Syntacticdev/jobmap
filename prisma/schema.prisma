// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  FREELANCER
  CLIENT
  ADMIN
}

enum STATUS {
  OPEN
  CLOSE
}

enum APP_STATUS {
  REVIEWING
  PENDING
  APPROVED
  CLOSED
}

enum OTP_PURPOSE {
  ACCOUNT_VERIFICATION
  PASSWORD_RESET
}

model User {
  id           String        @id @default(uuid())
  name         String?       @db.VarChar(100)
  email        String        @unique @db.VarChar(56)
  gender       String
  password     String        @db.VarChar(100)
  otpHash      String?
  otpPurpose   OTP_PURPOSE?
  otpExpiresAt DateTime?
  otpUsed      Boolean       @default(false)
  isVerified   Boolean       @default(false)
  role         ROLE          @default(FREELANCER)
  jobs         Job[]         @relation("ClientJobs")
  applications Application[] @relation("FreelancerApplications")
  profiles     Profile[]     @relation("UserProfiles")
  socials      Social[]      @relation("UserSocials")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Profile {
  id       String @id @default(uuid())
  title    String @db.VarChar(256)
  overview String @db.VarChar(2000)
  userId   String
  user     User   @relation("UserProfiles", fields: [userId], references: [id])
}

model Job {
  id           String        @id @default(uuid())
  title        String        @db.VarChar(256)
  description  String
  role         String
  offerMin     Int
  offerMax     Int
  status       STATUS        @default(OPEN)
  clientId     String
  client       User          @relation("ClientJobs", fields: [clientId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[] @relation("JobApplications")

  @@index([role, title])
}

model Application {
  id          String     @id @default(uuid())
  jobId       String
  job         Job        @relation("JobApplications", fields: [jobId], references: [id])
  coverLetter String
  cv          String
  status      APP_STATUS @default(PENDING)
  userId      String
  user        User       @relation("FreelancerApplications", fields: [userId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Social {
  id     String @id @unique @default(uuid())
  name   String @db.VarChar(30)
  link   String @db.VarChar(100)
  userId String
  user   User   @relation("UserSocials", fields: [userId], references: [id])
}

model RefreshToken {
  id      String   @id @default(uuid())
  userId  String
  email   String
  token   String   @unique
  expires DateTime
}
